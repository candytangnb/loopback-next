{
  "0115c9a527e1f9f5a354bbccdfe36112": "项目根目录：",
  "012baa262729b0782646db9528429b4c": "请选择存储库基类",
  "0609b5861fff6ee8047b75494e76af9e": "CRUD 操作的基本 HTTP 路径名称是什么？",
  "08a89a8f18d86a3e2f5ce66aeb8b183f": "{0} 的描述",
  "0e2dd2688c9939e6e3bc58af3b5e7b17": "有效的存储库基类",
  "0eee394c1a8c898184aa039420afc594": "要克隆的示例名称",
  "0f97dcea7dc212c905400da264b09cfd": "{1} 中创建了应用程序 {0}。",
  "114bb446343e91190ec9086623f58fd9": "选择要生成存储库的模型",
  "1186c24b9452b67a24cb130b76dedffa": "以下位置找不到任何模型",
  "12fb77f2e738ee14bda8660d5bcd894e": "包含该模型且支持模型发现的 dataSource 的名称",
  "1449a22c7ecbec112a5e26179bea22fc": "源模型主键不存在。",
  "1a0b53a1a5323fa92b6634ae16264892": "配置选项所用的 JSON 文件名称或值",
  "1d8b3191def358326ca3c1f5d011c96e": "将匿名模式升级为模型",
  "22097832e90dd9481994416927ad1ecc": "{0} 的名称",
  "2384e2eb575c2a7377a3de641b7556e3": "选择要生成的控制器：",
  "2d3e0ddbc158e249765cb0bb8f544217": "使用 npm run lint:fix 格式化生成的代码",
  "2d5745f8e3d91cf55dcc84f354a43e6c": "允许 <sourceModel> 查询包含来自相关 <destinationModel> 的数据",
  "3190bfdf06a7237a3593ef7291031507": "有效的基本模型",
  "3411753432848b4f4c6d3e3d73c09f4e": "数组项的类型：",
  "34a1d0defdf4035829eb9d2bd790b061": "组件类名称：",
  "377a709c8cc8bff5d976a4e0da06ef47": "ID 属性的名称是什么？",
  "3cd28c0bc408abf4517f346f8cbe359e": "{0} 是否为 ID 属性？",
  "3e7a1e0430f90996d14c5065c281fdcf": "它是否为全局拦截器？",
  "407fbe4b3fc192f22b4e90442c5980a1": "选择要发现的模型",
  "40cf3ed09f01e543265ffe4519bd08a5": "{0} 的项目名称",
  "4670d311aa36fb13d626ec4ab55d4f19": "后续步骤：",
  "48b75482f8e08e012b70a495df71d514": "将项目标记为私有（不包括在 npm 发布中）",
  "4b1516463cdea3b248eeb97ac4948198": "是否允许其他（自由格式）的属性？",
  "4d8a9b728bee844a0a6647379ab86826": "让我们将一个属性添加到 {0}",
  "5226c72e763d99e9a316a9ce9875fde9": "包含 Dockerfile 和 .dockerignore",
  "52e1f166e76bb9545daf180fb2e63782": "请选择关系类型",
  "536024b4c8926c72705ad6796e7629b6": "用于发现视图的布尔值",
  "542d9b2310d9bb9f8c4bf792dbb7d6cd": "应用程序类名：",
  "57fc5239f1ed8537950c0dc19a61b85f": "选择要发现的连接器",
  "5811f9c0ec7e60ecb58a58e1faa5574b": "启用 prettier",
  "59a4c6df82c2bbaf50592ee55982fe64": "使用 @loopback/build 助手（如 lb-eslint）",
  "5a0085f46605278c8b83284484cfa858": "用于排序全局拦截器的组名",
  "5bdddebdf72c7027a9e24aa500a35dd7": "缺省值 {0}：",
  "5d0490e5ebfdca22d238997aa3882bb9": "输入 OpenAPI spec url 或文件路径：",
  "5dd3fd8d55f85cec0f63ef7c370df454": "提示输入控制器类型",
  "5eb4697c2c62ae3b805af415847dd069": "以下位置找不到任何模型",
  "5f9d9ca636cc3bd7e133455d51fa410b": "请选择源模型",
  "6114abcc1315a8f1e0bef7748b00eb14": "使用预先配置的 VSCode 设置",
  "635110efac9ccc161e67007e2df6db06": "要发现的模式",
  "6393c8247a668f277bae18632fb260c1": "用于排序的观察器组的名称",
  "63a2b68c48f278cfafe6e2682b30e261": "安装 prettier 以格式化代码，使其符合规则",
  "64bbe2d519f72f60277b9661b313dab7": "项目名称：",
  "64e66b3917e80c0609371f314c1d87e0": "错误的关系类型",
  "66fbf32f221f83bbf88d3e7ed04f5724": "指定要存放“model.model.ts”文件的目录",
  "67ee888416f9432e38942252993cc304": "类不存在。请先通过“lb4 repository”命令创建存储库。",
  "693de1283bf4c567269b4984d3d82d82": "关系 getter 的源属性名称（将为关系名称）",
  "6e6a3836ad202ae5c263855b6e98ac85": "使用语义 semver 检查版本兼容性",
  "70067103913204b5125f9192be23086c": "创建新实例时是否忽略标识？",
  "7228a5fab7ef8492cf66a3ef8df74ddf": "如果在 dataSource 中发现模型，请指定包含该模型的模式",
  "7321493f5e514208aba16acbc3a8d1c9": "以下位置找不到任何数据源",
  "7652193b0c43b9ffe80339f63574cb63": "{0} 类名：",
  "76657b97b9993e79fdba1bff7c2a69ed": "添加 VSCode 配置文件",
  "79461416ce81d6f5c3ce3418fc191224": "安装 mocha 以运行测试",
  "7bcd10e0c597ed32f22b06726d10cb2b": "您的 CRUD 存储库的名称是什么？",
  "7c811ec38c295f6eaa7fa52c1c0cfee1": "{0} 的项目根目录",
  "7d35e6a282ed68a01b4badfddb9dd412": "包含服务代理导入和 ServiceMixin",
  "815548e083b8b7ea5edd0e57df0bfd29": "包含存储库导入和 RepositoryMixin",
  "84cee9d182963cbedca9286a040f1e9a": "跳过有关缺省值或所提供值的所有确认提示",
  "86e3245551645cc680371ba55857f172": "如果在 dataSource 中发现模型，请指定其表/视图的名称",
  "87252b6b2ca8b638846fae8825f47ccc": "{0} 会自动生成吗？",
  "8727d7fdfe60608d53d81f7699671a74": "请输入 {0} 的标识属性的名称：",
  "8ae4fe9c6f4bbdbe961a3e0f7fc88bfc": "请选择数据源",
  "919886be4ae469dbab529c61acd85781": "输入连接器的包名称：",
  "91cd2d832c4b723add34ca2db743b689": "要在目标模型上定义的外键名称",
  "93a678d3a0375c0d3b52c7d8e938e019": "生成已异常中止：{0}",
  "93d2bb2103d07f905ef0e83ea0e63e0b": "LoopBack 3.x 应用程序的路径。可以是项目目录（如“my-lb3-app”）或服务器文件（如“my-lb3-app/server/server.js”）。",
  "958ae3d061270d7e85cfe6b9c191feaf": "本地服务提供程序绑定到应用程序上下文",
  "982e471119e413bad610f51015bf80e0": "启用 eslint",
  "9a95948dd5623ba2e0486c3fbdd582af": "关系名称",
  "9d393adbce56c1a77f232c3d51256be2": "通过预先配置的 lint 规则添加一个 linter",
  "9e2f6b14adb66ccd111b6a2fe13cc53c": "全局拦截器的组名：('')",
  "a0057f1a34b70e6758a963af3253a482": "包含存储库导入和 RepositoryMixin",
  "a15fa7a8c5d61e571d811ac04ae6fe99": "{0} 组：",
  "a1de2d58d7e3cd0b012c038b47e101a2": "选择一条约定，将 db 列名称 (EXAMPLE_COLUMN) 转换为模型属性名称：",
  "a261957414bba63a85459b733f597acb": "应用程序类名",
  "a4577a939c79c9d229d545d109fd60fa": "package.json 中未配置任何“lint:fix”脚本。",
  "a47ec64e233351cf9f742a03f351c3d1": "全局拦截器按绑定到 ContextBindings.GLOBAL_INTERCEPTOR_ORDERED_GROUPS 的组名数组顺序进行排序。请参阅 https://loopback.io/doc/en/lb4/Interceptors.html#order-of-invocation-for-interceptors。",
  "a7f90f78abfa210e6d490268ea98ea80": "有效的模型名称",
  "a8dbe656477e8eab5c8763a9b1ff0f84": "选择要导入的模型：",
  "ad5df45eb6b1da34ba7f75bec5b6a3d5": "指示全局拦截器的标志",
  "aebb8636dacf73a5ea8811fafbe3ed68": "属性类型：",
  "b06ea51aa53522aff2889a64d68d1055": "关系类型",
  "b0e22938bbbbeb3d5f4692390820f4de": "请选择模型基类",
  "b3c1afbfb1c87daaac414bab981ee7bd": "读取文件时出错",
  "b68ecbcaa4f94151658f5ad32e6cf6fd": "本地服务类绑定到应用程序上下文",
  "b9356b7d2debc8b04dd6f2fd9bf5f83f": "希望克隆什么示例？",
  "be687f67487ae57f311148f55cc2df76": "要在源模型上定义的外键名称",
  "bfd42878b3c50994368322098aed9e42": "包含 Dockerfile 和 .dockerignore",
  "c0c9631ff3d1d1ad49a123b03328fe9c": "OpenAPI spec 的 URL 或文件路径",
  "c1f96ff7ee37bcc6aa150ae5d0dbc3bb": "您的标识是什么类型？",
  "c3eece87ffd6970cb83a75715824dce7": "包含服务代理导入和 ServiceMixin",
  "c87a36fbb5183525d0006021aec56a91": "目标模型外键名称",
  "c8d3e70199f75ca1f1d0bd9af1d62d38": "模型不存在。",
  "c92e838c1513ce96008d7bfee201e1e9": "有效的数据源名称",
  "cb5146e6905384a57eff6068ca059554": "发现所有模型，而未提示用户进行选择",
  "cdd5413fd110557d536620d714eea126": "希望生成哪种类型的控制器？",
  "cf97da6220d5e5745002134f79949c61": "要发现的数据源的名称",
  "d3686d2cd4e6d5de11cd0e61e4c18819": "数据源支持的远程服务代理",
  "d3750141fd303a7f87d4821a86d85c1c": "{0} 类型：",
  "d480d5df7f792391f9d80684a78a2424": "将生成的源文件写入的目录",
  "d71f61fa516dde9cd3dd3442238a5199": "{0} 名称：",
  "d75571079943e2a3696adfd8787ecc0f": "选择要在项目中启用的功能部件",
  "d8448d2597b2832ab43abba46a595c42": "用于此 CRUD 存储库的模型名称是什么？",
  "d963128609dd73445bd8b96b6a34eb68": "{0} 的类型",
  "db8c853ec3ce3b65e1513d198a9bd2e9": "启用 mocha",
  "ddb67f6cad9d36d2acf42898c4fe58f5": "组件名称",
  "e05247fa3388c64e6cc5ab608dd34346": "验证 OpenAPI spec",
  "e4765958ab33531b244d9d1d6fb2b705": "目标模型主键不存在。",
  "e4a87a58bb56e705349a97dbc23ecd6d": "缺省关系名称",
  "e4ca073d5042621174cf6950ad25b40e": "项目描述：",
  "ec0d3215aa6ad3aeae52f51dd7962879": "服务类型 - 代理、类或提供程序",
  "ec5b5f03d997ee0da0157737a7b10d7b": "源模型",
  "ed3bb197042a095ce19c1910d8d24226": "请输入属性名称：",
  "ee3b2cc023d839e3e31d346de7cce9e7": "目标模型",
  "f32b47dfce5e7d0077f977a61665cc29": "运行“npm run lint:fix”格式化代码...",
  "f757c71fa54de6559c39e4e7f63a601c": "请选择目标模型",
  "f7bf47d21b7e8bd36e22e5d3835008b5": "让我们将另一个属性添加到 {0}",
  "f846f25f533c78e5eab3c1afa289ca12": "在完成时输入空属性名称",
  "f87558eadaf216be8be9546d874d1301": "缺省外键名称",
  "f8b4ea0079120a07a9aabec29c9023d7": "指定模型的有效标识属性名称",
  "fae5b20162ed86b458a943aee0979f68": "使用 @loopback/build",
  "fd9d1ae9ba5ae0b5d8f2b2dd40be8b5f": "以下位置找不到模型",
  "fde67ed0176ea54fd0b2c6bb2fc72d13": "是否需要？：",
  "ffa8d88b9563dfa3e567974095c39140": "您未选择有效的模型"
}
